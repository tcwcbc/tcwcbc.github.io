---
title:  "객체지향의 사실과 오해(1)"
excerpt: "객체지향의 사실과 오해 - 협력하는 객체들의 공동체"
header:
  teaser: /assets/images/object-oriented-cover.jpeg

categories:
  - study
tags:
  - domain
  - object
  
last_modified_at: 2020-06-10T12:00:00+09:00
---

### p.25
모든 과정 속에는 손님, 캐시어, 바리스타 사이의 암묵적인 협력 관계가 존재한다.
- `역할`
- `책임`
- `협력`

### p.27
`역할`은 어떤 협력에 참여하는 특정한 사람이 협력 안에서 차지하는 책임이나 임무를 의미한다.  
`역할이라는 단어는 의미적으로 책임이라는 개념을 내포한다.`

### p.28
사람들들이 협력을 위해 특정한 역할을 맡고 역할에 적합한 책임을 수행한다는 사실은 몇가지 중요한 개념을 제시한다.

- `여러 사람이 동일한 역할을 수행할 수 있다` : 손님 입장에서 자신이 주문한 커피를 마실 수만 있다면 어떤 캐시어가 주문을 받는지 중요하지 않다. 캐시어의 입장에서 자신이 전달한 주문 내역에 맞게 커피를 제조할 수만 있다면 어떤 바리스타가 커피를 제조하더라도 크게 상관하지 않는다.
- `역할은 대체 가능성을 의미한다` : 요청자 입장에서 둘 중 어떤 사람이 역할을 수행하더라도 문제가 되지 않는다.
- `책임을 수행하는 방법은 자율적으로 선택할 수 있다` : 요청을 받은 사람들은 요청을 처리하는 방법을 자유롭게 선택할 수 있다. 서로 다른 방식으로 요창을 처리할 수 있다. (다형성)
- `한 사람이 동시에 여러 역할을 수행할 수 있다` : 한 사람이 캐시어와 바리스타의 역할을 동시에 수행하는 것도 가능하다.

### p.30
`시스템은 역할과 책임을 수행하는 객체로 분할되고 시스템의 기능은 객체 간의 연쇄적인 요청과 응답의 흐름으로 구성된 협력으로 구현된다`  
역할은 관련성 높은 책임의 집합이다.
- 여러 객체가 동일한 역할을 수행할 수 있다
- 역할은 대체 가능성을 의미한다
- 각 객체는 책임을 수행하는 방법을 자율적으로 선택할 수 있다
- 하나의 객체가 동시에 여러 역할을 수행할 수 있다

### p.31
역할은 유연하고 재사용 가능한 협력 관계를 구축하는 데 중요한 설계 요소다. 대체 가능한 역할과 책임은 객체지향 패러다임의 중요한 기반을 제공하는 다형성과도 깊이 연관돼있다.  
객체지향 애플리케이션의 윤곽을 결정하는 것은 역할, 책임, 협력이지만 실제로 협력에 참여하는 주체는 `객체`다.
협력의 품질을 결정하는 것은 객체의 품질이다.  
- 객체는 충분히 `협력적` 이어야 한다. : 모든 것을 스스로 처리하려고 하는 전지전능한 객체는 내부적인 복잡도에 의해 자멸
- 객체가 충분히 `자율적` 이어야 한다.

### p.32
객체지향 설계의 묘미는 다른 객체와 조화롭게 협력할 수 있을 만큼 충분히 개방적인 동시에 협력에 참여하는 방법을 스스로 결정할 수 있을 만큼 충분히 자율적인 객체들의 공동체를 설계하는 데 있다.

### p.33
객체가 협력에 참여하는 과정 속에서 스스로 판단하고 스스로 결정하는 자율적인 존재로 남기 위해서는 필요한 `행동`과 `상태`를 함께 지니고 있어야 한다.  
객체의 자율성은 객체의 내부와 외부를 명확하게 구분하는 것  
객체는 다른 객체가 `무엇`을 수행하는지 알 수 있지만 `어떻게` 수행하는지에 대해서는 알 수 없다.  
객체지향에서는 데이터와 프로세스를 객체라는 하나의 틀 안에 함께 묶어 놓음으로써 객체의 자율성을 보장한다.  

### p.34
객체지향의 세계에서는 오직 한 가지 의사소통 수단만이 존재한다. 이를 메시지라한다. 한 객체가 다른 객체에게 요청하는 것을 메시지를 전송한다고 말하고 다른 객체로부터 요청을 받는 것을 메시지를 수신한다고 한다.  
객체가 수신된 메시지를 처리하는 방법을 메서드라고 부른다.

### p.35
외부의 요청이 무엇인지를 표현하는 메시지와 요청을 처리하기 위한 구체적인 방법인 메서드를 분리하는 것은 객체의 자율성을 높이는 핵심 매커니즘이다. `캡슐화`  
`객체지향의 본질`
- 객체지향이란 시스템을 상호작용하는 `자율적인 객체들의 공동체`로 바라보고 `객체를 이용해 시스템을 분할하는 방`법이다.
- `자율적인 객체란 상태와 행위를 함께 지니며 스스로 자기 자신을 책임지는 객체`를 의미한다.
- 객체는 시스템의 행위를 구현하기 위해 `다른 객체와 협력`한다. 각 객체는 협력 내에서 `정해진 역할을 수행하며 역할은 관련된 책임의 집합`이다.
- 객체는 다른 객체와 `협력하기 위해 메시지를 전송`하고, 메시지를 수신한 객체는 메시지를 처리하는 데 적합한 `메서드를 자율적으로 선택`한다.

### p.37
대부분의 사람들은 객체지향을 클래스를 지향하는 것으로 생각했다.  
클래스가 객체지향 프로그래밍 언어의 관점에서 매우 중요한 구성요소인것은 분명하지만 객체지향의 핵심을 이루는 중심 개념이라고 말하기에는 무리가 있다. 

### p.38

- 코드를 담는 클래스의 괸점에서 메시지를 주고받는 객체의 관점으로 사고의 중심을 전환.
- `어떤 클래스가 필요한가가 아니라 어떤 객체들이 어떤 메시지를 주고 받으며 협력하는가가 중요.`
- `객체지향의 핵심은 클래스가 아니라 협력 관계를 구축하는 것이다.`
- `클래스의 구조와 메서드가 아니라 객체의 역할, 책임 협력에 집중`
