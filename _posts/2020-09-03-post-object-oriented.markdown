---
title:  "객체지향의 사실과 오해(5-2)"
excerpt: "객체지향의 사실과 오해 - 책임과 메시지"
header:
  teaser: /assets/images/object-oriented-cover.jpeg

categories:
  - study
tags:
  - domain
  - object
  
last_modified_at: 2020-09-03T12:00:00+09:00
---


### p.152
- 송신자가 수신자에 대해 매우 적은 정보만 알고 있더라도 상호 협력이 가능하다는 사실은 설계의 품질에 큰 영향을 미친다.
  - 협력이 유연해진다.
  - 협력이 수행되는 방식을 확장할 수 있다. 간단하게 새로운 유형의 객체를 협력에 끼워 맞추기만 하면 된다.
  - 협력이 수행되는 방식을 재사용할 수 있다.
- 객체지향 시스템읜 협력하는 객체들의 연결망이다.
- 이것은 객체의 조합을 변경함으로써 시스템의 행위를 변경할 수 있게 한다.
- 객체가 어떻게 할 것인지보다는 무엇을 할 것인지에 초점을 맞추기 때문에 시스템의 행위를 변경하기 쉽다.
- 메시지는 송신자와 수신자 사이의 결합도를 낮춤으로써 설게를 유연하고, 확장 가능하고, 재사용 가능하게 만든다.

### p.154
- `메시지를 기반으로 한 두 객체 사이의 이 낮은 결합도가 바로 설계의 유연하고 확장 가능하며 재사용 가능하게 만드는 비결이다. 따라서 설계의 품질을 높이기 위해서는 훌륭한 메시지를 선택해야한다.`
- 객체지향 애플리케이션의 중심 사상은 연쇄적으로 메시지를 전송하고 수신하는 객체들 사이의 협력 관계를 기반으로 사용자에게 유용한 기능을 제공하는 것이다.

### p.155
- 클래스가 코드를 구현하기 위해 사용할 수 있는 중요한 추상화 도구인 것은 사실이지만 객체지향의 강력함은 클래스가 아니라 객체들이 주고받는 메시지로부터 나온다. `객체지향 애플리케이션은 클래스를 이용해 만들어지지만 메시지를 통해 정의된다.`
- 중요한 것은 클래스가 아니라 객체다. 클래스를 정의하는 것이 먼저가 아니라 객체들의 속성과 행위를 식별하는 것이 먼저다. 클래스는 객체의 속성과 행위를 담는 틀일 뿐이다.
- 진정한 객체지향 패러다임으로의 도약은 개별적인 객체가 아니라 메시지를 주고 받는 객체들 사이의 커뮤니케이션에 초점을 맞출 때 일어난다.

### p.156
- `객체 자체에 초점을 맞출 경우 가장 흔히 범하게 되는 실수는 협력이라는 문맥을 배제한 채 객체 내부의 데이터 구조를 먼저 생각한 후 데이터 조작에 필요한 오퍼레이션을 나중에 고려하는 것이다.`
- 메시지가 아니라 데이터를 중심으로 객체를 설계하는 방식은 객체의 내부 구조를 객체정의의 일부로 만들기 때문에 객체의 자율성을 저해한다. 객체의 내부 구조는 감춰져야 한다.
- `외부의 객체가 객체의 내부를 마음대로 주무를 수 있다면 객체가 자신의 의지에 따라 판단하고 행동할 수 있는 자율성이 저해된다. 결국 객체 외부에서 몰라도 되는 객체 내부 구조의 변경이 외부의 협력자에게까지 파급될 것이다.`
- 데이터에 대한 결정을 뒤로 미루면서 객체의 행위를 고려하기 위해서는 객체를 독립된 단위가 아니라 협력이라는 문맥 안에서 생각해야 한다. 결국 객체를 이용하는 중요한 이유는 객체가 다른 객체가 필요로 하는 행위를 제공하기 때문이다. 협력 관계 속에서 다른 객체에게 무엇을 제공해야 하고 다른 객체로부터 무엇을 얻어야 하는가라는 관점에서 접근할 때만 훌륭한 책임을 수확할 수 있다.
- `독립된 객체의 상태와 행위에 대해 고민하지 말고 시스템의 기능을 구현하기 위해 객체가 다른 객체에게 제공해야 하는 메시지에 대해 고민하라.`
- 사실 협력이라는 문맥에서 벗어나 독립적인 객체에 관해 고민하는 것은 클래스에 초점을 맞추는 것과 별다른 차이가 없다. 객체지향 설계의 중심에는 메시지가 위치한다. 객체가 메시지를 선택하는 것이 아니라 메시지가 객체를 선택하게 해야 한다. 메시지가 객체를 선택하게 만들려면 메시지를 중심으로 협력을 설계해야 한다.

### p.157
- 객체지향 설계는 적절한 책임을 적절한 객체에게 할당하면서 메시지를 기반으로 협력하는 객체들의 관계를 발견하는 과정이다.
- 책임주도 설계의 기본 아이디어는 객체들 간에 주고받는 메시지를 기반으로 적절한 역할과 책임, 협력을 발견하는 것이다.
- 메시지가 수신자의 책임을 결정한다.

### p.158
- 책임주도 설계의 핵심은 어떤 행위가 필요한지를 먼저 결정한 후에 이 행위를 수행할 객체를 결정하는 것이다.
- `협력이라는 문맥 안에서 필요한 메시지를 먼저 결정한 후에 메시지를 수신하기 적합한 객체를 선택한다. 그리고 수신된 메시지가 객체의 책임을 결정한다.`
- 협력이라는 문맥 안에서 객체의 책임을 결정하는 것은 메시지이다.

### p.159
- 메시지를 먼저 결정함으로써 객체의 인터페이스를 발견할 수 있다는 사실이 중요하다.
- `객체가 어떤 메시지를 수신하고 처리할 수 있느냐가 객체의 책임을 결정한다. 책임주도 설계 방법에서는 What/Who 사이클에 따라 협력에 참여할 객체를 결정하기 전에 협력이 필요한 메시지를 먼저 결정한다. 메시지가 결정된 후에야 메시지를 수신할 후보를 선택하는 것으로 초점이 이동한다.`