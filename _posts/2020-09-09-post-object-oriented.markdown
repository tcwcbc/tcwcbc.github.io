---
title:  "객체지향의 사실과 오해(5-3)"
excerpt: "객체지향의 사실과 오해 - 책임과 메시지"
header:
  teaser: /assets/images/object-oriented-cover.jpeg

categories:
  - study
tags:
  - domain
  - object
  
last_modified_at: 2020-09-09T12:00:00+09:00
---


### p.159
- 메시지를 먼저 결정하고 객체가 메시지를 따르게 하는 설계 방식은 객체가 외부에 제공하는 인터페이스가 독특한 스타일을 따르게 한다. (데메테르 법칙 : 묻지말고 시켜라)

### p.160
- 송신자는 수신자가 어떤 객체인지 모르기 때문에 객체에 관해 꼬치꼬치 캐물을 수 없다. 단지 송신자는 수신자가 어떤 객체인지는 모르지만 자신이 전송한 메시지를 잘 처리할 것이라는 것을 믿고 메시지를 전송할 수 밖에 없다.
- 객체는 다른 객체의 결정에 간섭하지 말아야 하며, 모든 객체는 자신의 상태를 기반으로 스스로 결정을 내려야한다.
- 객체는 다른 객체의 상태를 묻지 말아야 한다.
- 필요한 메시지를 전송하기만 하고 메시지를 수신하는 객체가 스스로 메시지의 처리 방법을 결정하게 하라.

### p.161
- 메시지를 이해할 수만 있다면 다양한 타입의 객체로 협력 대상을 자유롭게 교체할 수 있기 때문에 설계가 좀 더 유연해진다.
- `메시지를 믿어라. 그러면 자율적인 책임은 저절로 따라올 것이다.`

### p.162
- 일반적으로 인터페이스는 다음과 같은 세 가지 특징을 지닌다.
  - 인터페이스의 사용법을 익히기만 하면 내부 구조나 동작 방식을 몰라도 쉽게 대상을 조작하거나 의사를 전달할 수 있다.
  - 인터페이스 자체는 변경하지 않고 단순히 내부 구성이나 작동 방식만을 변경하는 것은 인터페이스 사용자에게 어떤 영향도 미치지 않는다.
  - 대상이 변경되더라도 동일한 인터페이스를 제공하기만 하면 아무런 문제 없이 상호작용 할 수 있다.

### p.164
- 객체가 다른 객체와 상호작용할 수 있는 유일한 방법은 메시지 전송이다. 따라서 객체의 인터페이스는 객체가 수신할 수 있는 메시지의 목록으로 구성되며 객체가 어떤 메시지를 수신할 수 있는지가 객체가 제공하는 인터페이스의 모양을 빚는다.

### p.166
- 공용 인터페이스르 자극해서 책임을 수행하게 하는 것은 객체에게 전송되는 메시지다. 책임은 객체가 메시지를 수신했을 때 수행해야 하는 객체의 행동이며, 실제로 객체의 공용 인터페이스를 구성하는 것은 객체가 외부로부터 수신할 수 있는 메시지의 목록이다.
- 협력에 참여하는 객체의 책임이 자율적이어야 한다는 사실을 강조했다. 자신의 의지와 판단력을 기반으로 객체 스스로 책임을 수행하는 방법을 결정할 수 있음을 의미한다.
- 한 객체가 다른 객체에게 요청을 전송할 때 사용하는 매커니즘인 메시지에 관해 살펴봤다. 객체의 인터페이스는 객체가 수신할 수 있는 메시지의 목록으로 채워진다. 객체가 메시지를 수신했을 때 적절한 객체의 책임이 수행된다. 메서드란 메시지를 수신했을 때 책임을 수행하는 방법을 의미한다. 메시지와 메서드의 구분은 객체를 외부와 내부라는 두 개의 명확하게 분리된 영역으로 구분하는 동시에 다형성을 통해 다양한 타입의 객체를 수용할 수 있는 유연성을 부과한다.
- 객체가 책임을 수행하기 위해 외부로부터 메시지를 받기 위한 통로인 인터페이스의 개념을 설명했다. 인터페이스는 객체가 다른 객체와 협력하기 위한 접점이다.

### p.167
- 객체지향적인 사고 방식을 이해하기 위한 세가지 원칙
  - 좀 더 추상적인 인터페이스
  - 최소 인터페이스
  - 인터페이스와 구현 간의 차이가 있다는 점을 인식

### p.168
- 객체의 외부를 공용 인터페이스라고 부르고, 객체의 내부를 가리키는 특별한 용어 역시 존재한다.
- 객체지향의 세계에서 내부 구조와 작동 방식을 가리키는 고유의 용어는 구현이다. 객체를 구성하지만 공용 인터페이스에 포함되지 않는 모든 것이 구현에 포함된다.
- 객체의 외부와 내부를 분리하라는 것은 객체의 공용 인터페이스와 구현을 명확하게 분리하라는 말과 동일하다.

### p.169
- 훌륭한 객체란 구현을 모른 채 인터페이스만 알면 쉽게 상호작용 할 수 있는 객체를 의미한다.
- 인터페이스와 구현의 분리 원칙
- 결론적으로 객체 설계의 핵심은 객체를 두 개의 분리된 요소로 분할해 설계하는 것이다. 그것은 바로 외부에 공개되는 인터페이스와 내부에 감춰지는 구현이다.
- 소프트웨어는 항상 변경된다.
- 객체의 모든 것이 외부에 공개돼 있다면 아무리 작은 부분을 수정하더라도 변경에 의한 파급효과가 객체 공동체의 구석구석까지 파고들 것이다.
- 적절한 구현을 선택하고 이를 인터페이스 뒤로 감추는 것은 객체의 자율성을 향상시킬 수 있는 가장 기본적인 방법이다.
- `객체가 가져야 할 상태와 메서드 구현은 객체 내부에 속한다.`
- `객체 외부에 영향을 미치는 변경은 객체의 공용 인터페이스를 수정할 때뿐이다.`

### p.170
- 인터페이스와 구현의 분리 원칙은 변경을 관리하기 위한 것이다.
- 인터페이스와 구현을 분리한다는 것은 변경될 만한 부분을 객체의 내부에 꽁꽁 숨겨 놓는다는 것을 의미한다.
- 객체의 자율성을 보존하기 위해 구현을 외부로 감추는 것을 캡슐화라고 한다.
  - 상태와 행위의 캡슐화
  - 사적인 비밀의 캡슐화
- 객체는 상태와 행동을 하나의 단위로 묶는 자율적인 실체다. 이 관점에서 캡슐화를 데이터 캡슐화라고 한다.
- 외부에서 반드시 접근해야만 하는 행위만 골라 공용 인터페이스를 통해 노출한다. 따라서 데이터 캡슐화는 인터페이스와 구현을 분리하기 위한 전제 조건이다.

### p.171
- 프로그래밍 관점에서 상태는 주로 데이터로 구현되고 행동은 프로세스로 구현된다. 과거의 전통적인 개발 방법은 데이터와 프로세스를 엄격하게 구분하지만 객체지향에서는 데이터와 프로세스를 객체라는 하나의 틀 안으로 함께 묶어 놓음으로써 객체의 자율성을 보장한다. 이것이 전통적인 개발 방법과 객체지향을 구분 짓는 가장 중요한 차이다.
- 외부에서 객체와 의사소통할 수 있는 고정된 경로를 공용 인터페이스라고 한다.
- 캡슐화를 통해 변경이 빈번하게 일어나는 불안정한 비밀을 안정적인 인터페이스 뒤로 숨길 수 있다.
- 객체의 공용 인터페이스는 외부에서 전송 가능한 메시지의 집합이다.
- 객체는 공용 인터페이스를 경계로 최대한의 자율성을 보장받을 수있다.

### p.172
- `자율적인 객체는 공용 인터페이스를 수정하지 않는 한 자신과 협력하는 외부 객체에 영향을 미치지 않고 내부의 구현을 자유롭게 수정할 수 있다.`
- `객체를 자율적인 존재로 바라보는 것은 결국 객체의 내부와 외부를 엄격하게 분리한다는 것을 의미한다.`
- 객체의 외부와 내부를 명확하게 구분하라. 그러면 설계가 단순하고 유연하고 변경하기 쉬워질 것이다.
- 책임을 결정하는 것은 메시지라는 것을 기억하라. 따라서 자율적인 책임의 특성은 자율적인 책임을 수행하게 하는 메시지의 특성과도 연결된다.

### p.173~p.176
- 어떤 협력이 다른 협력보다 이해하기 쉽고 변경에 유연하기 때문이다. 객체의 책임이 자율적일수록 협력이 이해하기 쉬워지고 유연하게 변경할 수 있게 된다. 결과적으로 책임이 얼마나 자율적인지가 전체적인 협력의 설계 품질을 결정하게 된다.
  - 자율적인 책임은 협력을 단순하게 만든다
  - 자율적인 책임은 모자 장수의 외부와 내부를 명확하게 분리한다. 요청하는 객체가 몰라도 되는 사적인 부분이 객체 내부로 캡슐화되기 때문에 인터페이스와 구현이 분리된다.
  - 책임이 자율적일 경우 책임을 수행하는 내부적인 방법을 변경하더라도 외부에 영향을 미치지 않는다. 책임이 자율적일수록 변경에 의해 수정돼야 하는 범위가 좁아지고 명확해진다. 객체지향 커뮤니티의 전문 용어로 표현하자면 변경의 파급효과가 객체 내부로 캡슐화되기 떄문에 두 객체 간의 결합도가 낮아진다.
  - 자율적인 책임은 협력의 대상을 다양하게 선택할 수 있는 유연성을 제공한다. 책임이 자율적일수록 협력이 좀 더 유연해지고 다양한 문맥에서 재활용될 수 있다. 객체지향 커뮤니티의 전문 용어로 표현하자면 설계가 유연해지고 재사용성이 높아진다.
  - 객체가 수행하는 책임들이 자율적일수록 객체의 역할을 이해하기 쉬워진다.
- 책임이 자율적일수록 객체의 응집도를 높은 상태로 유지하기가 쉬워진다.
- `책임이 자율적일수록 협력이 이해하기 쉬워지고, 객체의 외부와 내부의 구분이 명확해지며, 변경에 의한 파급효과를 제한할 수 있고, 유연하게 변경할 수 있는 동시에 다양한 문맥에서 재활용할 수 있게 된다.`
- `책임이 자율적일수록 적절하게 추상화되며, 응집도가 높아지고, 결합도가 낮아지며, 캡슐화가 증진되고, 인터페이스와 구현이 명확히 분리되며, 설계의 유연성과 재사용성이 향상된다.`
- `책임을 자율적으로 만드는 것은 메시지에 따라 달라진다.`