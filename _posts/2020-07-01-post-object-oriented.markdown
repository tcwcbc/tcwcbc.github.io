---
title:  "객체지향의 사실과 오해(3-1)"
excerpt: "객체지향의 사실과 오해 - 타입과 추상화"
header:
  teaser: /assets/images/object-oriented-cover.jpeg

categories:
  - study
tags:
  - domain
  - object
  
last_modified_at: 2020-07-01T12:00:00+09:00
---
### p.76
추상화란 현실에서 출발하되 불필요한 부분을 도려내가면서 사물의 놀라운 본질을 드러나게 하는 과정이라고 할 수 있다.


### p.77
추상화
- 어떤 양상, 세부 사항, 구조를 좀 더 명확하게 이해하기 위해 특정 절차나 물체를 의도적으로 생략하거나 감춤으로써 복잡도를 극복하는 방법
    - 구체적인 사물들 간의 공통점은 취하고차이점은 버리는 일반화를 통해 단순하게 만드는 것
    - 중요한 부분을 강조하기 위해 불필요한 세부사항을 제거함으로써 단순하게 만드는 것
- 추상화의 목적은 복잡성을 이해하기 쉬운 수준으로 단순화


### p.81
명확한 경계를 가지고 서로 구별할 수 있는 구체적인 사람이나 사물을 객체지향 패러다임에서는 객체라고 한다.


### p.83
- 차이점을 무시하고 공통점만을 취해 트럼프라는 개념으로 단순화한 것은 추상화의 일종  
- 개념 : 공통점을 기반으로 객체들을 묶기 위한 그릇  
- 개념은 바뀔 수 있는가?
```
개념은 시스템의 요구사항에 따라 도메인 로직이 변경되면서 바뀔 수 있다.  
다만, 이 때 중요한 것은 그 이슈가 개념에 속한 공통점인지 판단하는 능력이 필요하다.  
개념에 속해야했지만 놓친것인지 아니면 어떤 개념이 잘못 정의 되어서 발생하는 부수효과인지 분별할 수 있는 능력이 필요하다.
```


### p.84
개념을 이용하면 객체를 여러 그룹으로 분류(classification)할 수 있다.  
객체에 어떤 개념을 적용하는 것이 가능해서 개념 그룹의 일원이 될 때 객체를 그 개념의 인스턴스(instance)라고 한다.  
객체란 특정한 개념을 적용할 수 있는 구체적인 사물을 의미한다. 개념이 객체에 적용됐을 때 객체를 개념의 인스턴스라고한다.

  
### p.85
- 개념의 세 가지 관점
    - 심볼 : 개념을 가리키는 간략한 이름이나 명칭
    - 내연 : 개념의 완전한 정의를 나타내며 내연의 의미를 이용해 객체가 개념에 속하는지 여부를 확인할 수 있다.
    - 외연 : 개념에 속하는 모든 객체의 집합  
- 예시
    - 심볼 : 트럼프
    - 내연 : 몸이 납작하고 두 손과 두 발은 네모 귀퉁이에 달려 있는 등장인물
    - 외연 : 정원사, 병사, 신하, 왕자와 공주...


### p.87
분류란 객체에 특정한 개념을 적용하는 작업이다. 객체에 특정한 개념을 적용하기로 결심했을 때 우리는 그 객체를 특정한 집합의 멤버로 분류하고 있는 것이다.


### p.89
타입은 개념과 동일하다. 따라서 타입이란 우리가 인식하고 있는 다양한 사물이나 객체에 적용할 수 있는 아이디어나 관념을 의미한다. 어떤 객체에 타입을 적용할 수 있을 때 그 객체를 타입의 인스턴스라고 한다. 타입의 인스턴스는 타입을 구성하는 외연인 객체 집합의 일원이 된다.


### p.91
타입 시스템의 목적은 데이터가 잘못 사용되지 않도록 제약사항을 부과하는 것이다.
- 타입은 데이터가 어떻게 사용되느냐에 관한 것
- 타입에 속한 데이터를 메모리에 어떻게 표현하는지는 외부로부터 철저하게 감춰진다.
데이터 타입은 메모리 안에 저장된 데이터의 종류를 분류하는 데 사용되는 메모리 집합에 관한 메타데이터다. 데이터에 대한 분류는 암시적으로 어떤 종류의 연산이 해당 데이터에 대해 수행될 수 있는지를 결정한다.
- ex) 200701 이라는 값이 단순 숫자인지 연/월/일 인지는 이 값의 타입에 따라 결정


### p.92
그렇다면 객체는 데이터인가? 그렇지 않다. 다시 한번 강조하지만 객체에서 중요한 것은 객체의 행동이다. 상태는 행동의 결과로 초래된 부수효과를 쉽게 표현하기 위해 도입한 추상적인 개념일 뿐이다.  
객체가 협력을 위해 어떤 책임을 지녀야 하는지를 결정하는 것이 객체지향 설계의 핵심    
객체의 타입
- 어떤 객체가 어떤 타입에 속하는지를 결정하는 것은 객체가 수행하는 행동
- 객체의 내부적인 표현은 외부로부터 철저하게 감춰진다


### p.93
결과적으로 동일한 책임을 수행하는 일련의 객체는 동일한 타입에 속한다고 말할 수 있다.  
그 객체가 어떤 데이터를 가지고 있는지 우리의 관심사가 아니다.
```
Java의 Interface
- 객체의 타입을 결정하는 것은 행동이다. 그래서 Java의 Interface는 변경가능한 상태값(필드)를 기준으로 작성되는 것이 아니라 외부에 공개가능한 행동(메소드)를 기준으로 작성을 하도록 강제하는 것 같다. 보통 구현 시에 공통점이 있는 타입인지 체크하기 위해 상위의 인터페이스 타입인지 비교하는 것도 이와 같은 이유가 아닐까.

다른 객체지향언어도 java처럼 타입을 강제하는가?
- 잘 모르겠지만 그렇지 않을까. 그런데, 객체지향언어라는 것이 존재하는 걸까? 객체지향이라는 것은 하나의 패러다임이지 특정 언어와 연결되어 있는 것은 아니다. 스크립트 언어든 컴파일 언어든 언어의 분류는 그 언어가 어떻게 동작하는지에 따라 나뉘는 것이지 어떤 언어가 객체지향언어라고 명명할 수 없다. 어떤 언어든(php, 파이썬, Go, javascript 등) 어떤 관점에서 설계를 하고 구현하는지에 달렸다. 다만 php나 javascript와 같이 객체지향을 잘 표현할 수 없는 언어라면 조금 더 많은 노력이 필요할 것이다.
- ex) 한국의 '정' 이라는 개념을 한국어로 할 때는 하나의 단어로 설명하면 되지만 영어로 표현할 때는 여러문장과 표현을 동원하는 노력이 필요하다.
```
동일한 타입에 속한 객체는 내부의 데이터 표현 방식이 다르더라도 동일한 메시지를 수신하고 이를 처리할 수 있다.


### p.94
데이터의 내부 표현 방식과 무관하게 행동만이 고려 대상이라는 사실은 외부에 데이터를 감춰야 한다는 것을 의미하며 이를 캡슐화라고 한다.  
객체가 외부에 제공해야 하는 책임을 먼저 결정하고 그 책임을 수행하는 데 적합한 데이터를 나중에 결정한 후, 데이터를 책임을 수행하는 데 필요한 외부 인터페이스 뒤로 캡슐화해야 한다.  
책임주도 설계 - 데이터주도 설계  
- 책임주도 설계를 쉽게 할 수 있는 방법론 중의 하나가 이벤트스토밍이 아닐까?

### p.95
객체를 결정하는 것은 행동이다. 데이터는 단지 행동을 따를 뿐이다. 이것이 객체를 객체답게 만드는 가장 핵심적인 원칙이다.
