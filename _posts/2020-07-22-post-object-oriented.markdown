---
title:  "객체지향의 사실과 오해(4-2)"
excerpt: "객체지향의 사실과 오해 - 역할, 책임, 협력"
header:
  teaser: /assets/images/object-oriented-cover.jpeg

categories:
  - study
tags:
  - domain
  - object
  
last_modified_at: 2020-07-22T12:00:00+09:00
---


### p.127
- 본질적으로 역할은 다른 객체에 의해 대체 가능함을 의미
- 객체가 역할을 대체하기 위해서는 행동이 호환돼야 한다는 점에 주목
- 객체가 역할을 대체 가능하기 위해서는 협력 안에서 역할이 수행하는 모든 책임을 동일하게 수행할 수 있어야 한다.
- 객체가 역할에 주어진 책임 이외에 다른 책임을 수행할 수도 있다는 사실에 주목
- 일반화/특수화 관계
- 역할이 협력을 추상적으로 만들 수 있는 이유는 역할 자체가 객체의 추상화
- `역할의 대체 가능성은 행위 호환성을 의미하고, 행위 호환성은 동일한 책임의 수행을 의미`

### p.128
- 많은 사람들은 시스템에 필요한 데이터를 저장하기 위해 객체가 존재한다는 선입견을 가지고 있다.
- `객체가 존재하는 이유는 행위를 수행하며 협력에 참여하기 위해서다. 따라서 실제로 중요한 것은 객체의 행동, 즉 책임이다.`
- 객체지향이 클래스와 클래스 간의 관계를 표현하는 시스템의 정적인 측면에 중점을 둔다는 것
- `객체지향의 핵심은 클래스를 어떻게 구현할 것인가가 아니라 객체가 협력 안에서 어떤 책임과 역할을 수행할 것인지를 결정하는 것`
- 데이터나 클래스를 중심으로 애플리케이션을 설계하는 이유는 협력이라는 문맥을 고려하지 않고 각 객체를 독립적으로 바라보기 때문이다.

### p.129
- 올바른 객체를 설계하기 위해서는 먼저 견고하고 깔끔한 협력을 설계해야 한다. 협력을 설계한다는 것은 설계에 참여하는 객체들이 주고받을 요청과 응답의 흐름을 결정한다는 것을 의미한다. 이렇게 결정된 요청과 응답의 흐름은 객체가 협력에 참여하기 위해 수행될 책임이 된다.
- 행동을 결정한 후에 그 행동을 수행하는 데 필요한 데이터를 고민해야한다. 그리고 객체가 협력에 참여하기 위해 필요한 데이터와 행동이 어느 정도 결정된 후에 클래스의 구현 방법을 결정해야 한다.
- `결과적으로 클래스와 데이터는 협력과 책임의 집합이 결정된 후에야 무대 위에 등장할 수 있다.`

### p.130
- 객체지향이 올바른 객체에 올바른 책임을 할당하는 것과 관련된 모든 것이라면 협력이라는 문맥 안에서 객체를 생각하는 것은 올바른 객체지향 애플리케이션을 구현하는 것과 관련된 모든 것이다.
- 협력에 필요한 책임을 결정하고 객체에게 책임을 할당하는 과정을 얼마나 합리적이고 적절하게 수행했는지가 객체지향설계의 품질을 결정한다.
- 각 객체가 가져야 하는 상태와 행위에 대해 고민하기 전에 그 객체가 참여할 문맥인 협력을 정의하라. 객체지향 시스템에서 가장 중요한 것은 충분히 자율적인 동시에 충분히 협력적인 객체를 창조하는 것이다. 이 목표를 달성할 수 있는 가장 쉬운 방법은 `객체를 충분히 협력적으로 만든 후에 협력이라는 문맥 안에서 객체를 충분히 자율적으로 만드는 것이다.`
- `책임주도 설계 방법은 협력에 필요한 책임들을 식별하고 적합한 객체에 책임을 할당하는 방식`
- `디자인 패턴은 전문가들이 반복적으로 사용하는 해결 방법을 정의해 놓은 설계 템플릿의 모음`

### p.131
- `테스트주도 개발은 테스트를 먼저 작성하고 테스트를 통과하는 구체적인 코드를 추가하면서 애플리케이션을 완성해가는 방식`
- `테스트주도 개발의 실제 목적은 구체적인 코드를 작성해나가면서 역할, 책임, 협력을 식별하고 식별된 역할, 책임 협력이 적합한지 피드백받는 것이다.`
- 객체지향 시스템의 목적은 사용자의 요구를 만족시킬 수 있는 기능을 제공하는 동시에 이해하기 쉽고, 단순하며, 유연한 상호작용을 제공하는 객체들의 공동체를 구축하는 것
- `객체지향 설계란 애플리케이션의 기능을 구현하기 위한 협력 관계를 고안하고, 협력에 필요한 역할과 책임을 식별한 후 이를 수행할 수 있는 적절한 객체를 식별해 나가는 과정`

### p.132
- 전체 개발 단계에 걸쳐 객체의 역할과 책임, 협력을 도드라지게 만드는 기법과 체계를 따르는 것이 중요
- 지속적인 훈련과 견고한 기술, 안정적인 가이드라인을 필요로 한다.
- 책임주도 설계에서는 시스템의 책임을 객체의 책임으로 변환하고, 각 객체가 책임을 수행하는 중에 필요한 정보나 서비스를 제공해줄 협력자를 찾아 해당 협력자에게 책임을 할당하는 순차적인 방식으로 객체들의 협력 공동체를 구축한다. 개별적인 객체의 상태가 아니라 객체의 책임과 상호작용에 집중한다.
- `객체지향 시스템 설계 절차`
    - `시스템이 사용자에게 제공해야하는 기능인 시스템 책임을 파악한다.`
    - `시스템 책임을 더 작은 책임으로 분할한다.`
    - `분할된 책임을 수행할 수 있는 적절한 객체 또는 역할을 찾아 책임을 할당한다.`
    - `객체가 책임을 수행하는 중에 다른 객체의 도움이 필요한 경우 이를 책임질 적절한 객체 또는 역할을 찾는다.`
    - `해당 객체 또는 역할에게 책임을 할당함으로써 두 객체가 협력하게 한다.`
- `역할, 책임, 협력에 집중하라`
- 책임주도 설계는 객체의 역할, 책임, 협력을 고안하기 위한 방법과 절차를 제시한다. 반면 디자인 패턴은 책임주도 설계의 결과를 표현한다.
- 디자인 패턴은 반복적으로 발생하는 문제와 그 문제에 대한 해법의 쌍으로 정의된다. 패턴은 해결하려고 하는 문제가 무엇인지를 명확하게 서술하고, 패턴을 적용할 수 있는 상황과 적용할 수 없는 상황을 함께 설명한다. 패턴은 반복해서 일어나는 특정한 상황에서 어떤 설계가 왜 더 효과적인지에 대한 이유를 설명한다.

### p.136
- 디자인 패턴은 공통으로 사용할 수 있는 역할, 책임, 협력의 템플릿이다.
- 디자인 패턴은 책임주도 설계의 결과물인 동시에 지름길인다.
- 테스트주도 개발의 기본 흐름은 실패하는 테스트를 작성하고, 테스트를 통과하는 가장 간단한 코드를 작성한 후(이 시간 동안에는 중복이 있어도 무방하다), 리팩터링을 통해 중복을 제거하는 것이다. 테스트주도 개발을 통해 '작동하는 깔끔한 코드'를 얻을 수 있다.
- 테스트주도 개발은 객체가 이미 존재한다고 가정하고 객체에게 어떤 메시지를 전송할 것인지에 관해 먼저 생각하라고 충고한다. 그러나 이 같은 종류의 충고는 `역할, 책임, 협력의 관점에서 객체를 바라보지 않을 경우 무의미하다.`
- `테스트주도 개발은 테스트를 작성하는 것이 아니라 책임을 수행할 객체 또는 클라이언트가 기대하는 객체의 역할이 메시지를 수신할 때 어떤 결과를 반환하고 그 과정에서 어떤 객체와 협력할 것인지에 대한 기대를 코드의 형태로 작성하는 것.`

### p.137
- 협력 안에서 객체의 역할과 책임이 무엇이고 이것이 클래스와 같은 프로그래밍 언어 장치로 구현되는 방식에 대한 감각을 갖춰야만 효과적인 테스트를 작성할 수 있다. 테스트주도 개발은 책임주도 설계를 통해 도달해야 하는 목적지를 테스트라는 안전장치를 통해 좀 더 빠르고 견고한 방법으로 도달할 수 있도록 해주는 최상의 설계 프랙티스다.
- `테스트주도 개발은 다양한 설계 경험과 패턴에 대한 지식이 없는 사람들의 경우에는 온전한 혜택을 누리기가 어렵다.`
- `테스트주도 개발은 책임주도 설계의 기본 개념과 다양한 원칙과 프랙티스, 패턴을 종합적으로 이해하고 좋은 설계에 대한 감각과 경험을 길러야만 적용할 수 있는 설계기법이다.`
